library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.std_logic_unsigned.all;
entity display is
    Port ( clk : in STD_LOGIC;-- 100Mhz clock on Basys 3 FPGA board

			  sel : out STD_LOGIC_VECTOR (1 downto 0);-- 4 Anode signals
           LED_out : out STD_LOGIC_VECTOR (6 downto 0));-- Cathode patterns of 7-segment display
end entity;

architecture Behavioral of display is
	signal Led_bcd: integer range 0 to 9;
	signal n: integer range 0 to 99 := 53;
	signal count: integer range 0 to 1 :=0;
	signal clk1: std_logic :='1';
	component create_clk is
port(
	clk	: in 	std_logic;
	clk_baudrate_9600: out std_logic := '1'
);
end component;
begin
	process(LED_BCD)
	begin
		 case LED_BCD is
			 when 0 => LED_out <= "0000001"; 
			 when 1 => LED_out <= "1001111"; 
			 when 2 => LED_out <= "0010010";  
			 when 3 => LED_out <= "0000110";  
			 when 4 => LED_out <= "1001100";  
			 when 5 => LED_out <= "0100100";  
			 when 6 => LED_out <= "0100000"; 
			 when 7 => LED_out <= "0001111";  
			 when 8 => LED_out <= "0000000";      
			 when 9 => LED_out <= "0000100";

			 when others => 
		 end case;
	end process;
	U1: create_clk port map(clk, clk1);
	process(clk1)
		variable count1: integer range 0 to 10:=0;
	begin
		if rising_edge(clk1) then
			case count is
				when 0 =>
					sel <= "10";
					if n >= 90 then 
						led_BCD <= 9;
					elsif n >= 80 then 
						led_BCD <= 8;
					elsif 	n >= 70 then 
						led_BCD <= 7;
					elsif 	n >= 60 then 
						led_BCD <= 6;
					elsif 	n >= 50 then 
						led_BCD <= 5;
					elsif 	n >= 40 then 
						led_BCD <= 4;
					elsif 	n >= 30 then 
						led_BCD <= 3;
					elsif 	n >= 20 then 
						led_BCD <= 2;
					elsif 	n >= 10 then 
						led_BCD <= 1;
					else
						led_BCD <= 0;
					end if;
					count <= 1;
				when 1 =>
					sel <= "01";
					led_BCD <= n - led_BCD*10;
					count <= 0;
			end case;
		end if;
	end process;

end Behavioral;