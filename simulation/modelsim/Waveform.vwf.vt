// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/06/2023 22:16:11"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    traffic_light_control
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module traffic_light_control_vlg_sample_tst(
	clk,
	sampler_tx
);
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module traffic_light_control_vlg_check_tst (
	led_out_lane1,
	led_out_lane2,
	light_active_night1,
	light_active_rush_hour_1,
	light_lane1,
	light_lane2,
	sel1,
	sel2,
	time2,
	sampler_rx
);
input [6:0] led_out_lane1;
input [6:0] led_out_lane2;
input  light_active_night1;
input  light_active_rush_hour_1;
input [2:0] light_lane1;
input [2:0] light_lane2;
input [1:0] sel1;
input [1:0] sel2;
input [4:0] time2;
input sampler_rx;

reg [6:0] led_out_lane1_expected;
reg [6:0] led_out_lane2_expected;
reg  light_active_night1_expected;
reg  light_active_rush_hour_1_expected;
reg [2:0] light_lane1_expected;
reg [2:0] light_lane2_expected;
reg [1:0] sel1_expected;
reg [1:0] sel2_expected;
reg [4:0] time2_expected;

reg [6:0] led_out_lane1_prev;
reg [6:0] led_out_lane2_prev;
reg  light_active_night1_prev;
reg  light_active_rush_hour_1_prev;
reg [2:0] light_lane1_prev;
reg [2:0] light_lane2_prev;
reg [1:0] sel1_prev;
reg [1:0] sel2_prev;
reg [4:0] time2_prev;

reg [6:0] led_out_lane1_expected_prev;
reg [6:0] led_out_lane2_expected_prev;
reg  light_active_night1_expected_prev;
reg  light_active_rush_hour_1_expected_prev;
reg [2:0] light_lane1_expected_prev;
reg [2:0] light_lane2_expected_prev;
reg [1:0] sel1_expected_prev;
reg [1:0] sel2_expected_prev;
reg [4:0] time2_expected_prev;

reg [6:0] last_led_out_lane1_exp;
reg [6:0] last_led_out_lane2_exp;
reg  last_light_active_night1_exp;
reg  last_light_active_rush_hour_1_exp;
reg [2:0] last_light_lane1_exp;
reg [2:0] last_light_lane2_exp;
reg [1:0] last_sel1_exp;
reg [1:0] last_sel2_exp;
reg [4:0] last_time2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	led_out_lane1_prev = led_out_lane1;
	led_out_lane2_prev = led_out_lane2;
	light_active_night1_prev = light_active_night1;
	light_active_rush_hour_1_prev = light_active_rush_hour_1;
	light_lane1_prev = light_lane1;
	light_lane2_prev = light_lane2;
	sel1_prev = sel1;
	sel2_prev = sel2;
	time2_prev = time2;
end

// update expected /o prevs

always @(trigger)
begin
	led_out_lane1_expected_prev = led_out_lane1_expected;
	led_out_lane2_expected_prev = led_out_lane2_expected;
	light_active_night1_expected_prev = light_active_night1_expected;
	light_active_rush_hour_1_expected_prev = light_active_rush_hour_1_expected;
	light_lane1_expected_prev = light_lane1_expected;
	light_lane2_expected_prev = light_lane2_expected;
	sel1_expected_prev = sel1_expected;
	sel2_expected_prev = sel2_expected;
	time2_expected_prev = time2_expected;
end


// expected led_out_lane1[ 6 ]
initial
begin
	led_out_lane1_expected[6] = 1'bX;
end 
// expected led_out_lane1[ 5 ]
initial
begin
	led_out_lane1_expected[5] = 1'bX;
end 
// expected led_out_lane1[ 4 ]
initial
begin
	led_out_lane1_expected[4] = 1'bX;
end 
// expected led_out_lane1[ 3 ]
initial
begin
	led_out_lane1_expected[3] = 1'bX;
end 
// expected led_out_lane1[ 2 ]
initial
begin
	led_out_lane1_expected[2] = 1'bX;
end 
// expected led_out_lane1[ 1 ]
initial
begin
	led_out_lane1_expected[1] = 1'bX;
end 
// expected led_out_lane1[ 0 ]
initial
begin
	led_out_lane1_expected[0] = 1'bX;
end 
// expected led_out_lane2[ 6 ]
initial
begin
	led_out_lane2_expected[6] = 1'bX;
end 
// expected led_out_lane2[ 5 ]
initial
begin
	led_out_lane2_expected[5] = 1'bX;
end 
// expected led_out_lane2[ 4 ]
initial
begin
	led_out_lane2_expected[4] = 1'bX;
end 
// expected led_out_lane2[ 3 ]
initial
begin
	led_out_lane2_expected[3] = 1'bX;
end 
// expected led_out_lane2[ 2 ]
initial
begin
	led_out_lane2_expected[2] = 1'bX;
end 
// expected led_out_lane2[ 1 ]
initial
begin
	led_out_lane2_expected[1] = 1'bX;
end 
// expected led_out_lane2[ 0 ]
initial
begin
	led_out_lane2_expected[0] = 1'bX;
end 

// expected light_active_night1
initial
begin
	light_active_night1_expected = 1'bX;
end 

// expected light_active_rush_hour_1
initial
begin
	light_active_rush_hour_1_expected = 1'bX;
end 
// expected light_lane1[ 2 ]
initial
begin
	light_lane1_expected[2] = 1'bX;
end 
// expected light_lane1[ 1 ]
initial
begin
	light_lane1_expected[1] = 1'bX;
end 
// expected light_lane1[ 0 ]
initial
begin
	light_lane1_expected[0] = 1'bX;
end 
// expected light_lane2[ 2 ]
initial
begin
	light_lane2_expected[2] = 1'bX;
end 
// expected light_lane2[ 1 ]
initial
begin
	light_lane2_expected[1] = 1'bX;
end 
// expected light_lane2[ 0 ]
initial
begin
	light_lane2_expected[0] = 1'bX;
end 
// expected sel1[ 1 ]
initial
begin
	sel1_expected[1] = 1'bX;
end 
// expected sel1[ 0 ]
initial
begin
	sel1_expected[0] = 1'bX;
end 
// expected sel2[ 1 ]
initial
begin
	sel2_expected[1] = 1'bX;
end 
// expected sel2[ 0 ]
initial
begin
	sel2_expected[0] = 1'bX;
end 
// expected time2[ 4 ]
initial
begin
	time2_expected[4] = 1'bX;
end 
// expected time2[ 3 ]
initial
begin
	time2_expected[3] = 1'bX;
end 
// expected time2[ 2 ]
initial
begin
	time2_expected[2] = 1'bX;
end 
// expected time2[ 1 ]
initial
begin
	time2_expected[1] = 1'bX;
end 
// expected time2[ 0 ]
initial
begin
	time2_expected[0] = 1'bX;
end 
// generate trigger
always @(led_out_lane1_expected or led_out_lane1 or led_out_lane2_expected or led_out_lane2 or light_active_night1_expected or light_active_night1 or light_active_rush_hour_1_expected or light_active_rush_hour_1 or light_lane1_expected or light_lane1 or light_lane2_expected or light_lane2 or sel1_expected or sel1 or sel2_expected or sel2 or time2_expected or time2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected led_out_lane1 = %b | expected led_out_lane2 = %b | expected light_active_night1 = %b | expected light_active_rush_hour_1 = %b | expected light_lane1 = %b | expected light_lane2 = %b | expected sel1 = %b | expected sel2 = %b | expected time2 = %b | ",led_out_lane1_expected_prev,led_out_lane2_expected_prev,light_active_night1_expected_prev,light_active_rush_hour_1_expected_prev,light_lane1_expected_prev,light_lane2_expected_prev,sel1_expected_prev,sel2_expected_prev,time2_expected_prev);
	$display("| real led_out_lane1 = %b | real led_out_lane2 = %b | real light_active_night1 = %b | real light_active_rush_hour_1 = %b | real light_lane1 = %b | real light_lane2 = %b | real sel1 = %b | real sel2 = %b | real time2 = %b | ",led_out_lane1_prev,led_out_lane2_prev,light_active_night1_prev,light_active_rush_hour_1_prev,light_lane1_prev,light_lane2_prev,sel1_prev,sel2_prev,time2_prev);
`endif
	if (
		( led_out_lane1_expected_prev[0] !== 1'bx ) && ( led_out_lane1_prev[0] !== led_out_lane1_expected_prev[0] )
		&& ((led_out_lane1_expected_prev[0] !== last_led_out_lane1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_out_lane1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_out_lane1_expected_prev);
		$display ("     Real value = %b", led_out_lane1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_out_lane1_exp[0] = led_out_lane1_expected_prev[0];
	end
	if (
		( led_out_lane1_expected_prev[1] !== 1'bx ) && ( led_out_lane1_prev[1] !== led_out_lane1_expected_prev[1] )
		&& ((led_out_lane1_expected_prev[1] !== last_led_out_lane1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_out_lane1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_out_lane1_expected_prev);
		$display ("     Real value = %b", led_out_lane1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_out_lane1_exp[1] = led_out_lane1_expected_prev[1];
	end
	if (
		( led_out_lane1_expected_prev[2] !== 1'bx ) && ( led_out_lane1_prev[2] !== led_out_lane1_expected_prev[2] )
		&& ((led_out_lane1_expected_prev[2] !== last_led_out_lane1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_out_lane1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_out_lane1_expected_prev);
		$display ("     Real value = %b", led_out_lane1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_out_lane1_exp[2] = led_out_lane1_expected_prev[2];
	end
	if (
		( led_out_lane1_expected_prev[3] !== 1'bx ) && ( led_out_lane1_prev[3] !== led_out_lane1_expected_prev[3] )
		&& ((led_out_lane1_expected_prev[3] !== last_led_out_lane1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_out_lane1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_out_lane1_expected_prev);
		$display ("     Real value = %b", led_out_lane1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_out_lane1_exp[3] = led_out_lane1_expected_prev[3];
	end
	if (
		( led_out_lane1_expected_prev[4] !== 1'bx ) && ( led_out_lane1_prev[4] !== led_out_lane1_expected_prev[4] )
		&& ((led_out_lane1_expected_prev[4] !== last_led_out_lane1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_out_lane1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_out_lane1_expected_prev);
		$display ("     Real value = %b", led_out_lane1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_out_lane1_exp[4] = led_out_lane1_expected_prev[4];
	end
	if (
		( led_out_lane1_expected_prev[5] !== 1'bx ) && ( led_out_lane1_prev[5] !== led_out_lane1_expected_prev[5] )
		&& ((led_out_lane1_expected_prev[5] !== last_led_out_lane1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_out_lane1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_out_lane1_expected_prev);
		$display ("     Real value = %b", led_out_lane1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_out_lane1_exp[5] = led_out_lane1_expected_prev[5];
	end
	if (
		( led_out_lane1_expected_prev[6] !== 1'bx ) && ( led_out_lane1_prev[6] !== led_out_lane1_expected_prev[6] )
		&& ((led_out_lane1_expected_prev[6] !== last_led_out_lane1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_out_lane1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_out_lane1_expected_prev);
		$display ("     Real value = %b", led_out_lane1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_out_lane1_exp[6] = led_out_lane1_expected_prev[6];
	end
	if (
		( led_out_lane2_expected_prev[0] !== 1'bx ) && ( led_out_lane2_prev[0] !== led_out_lane2_expected_prev[0] )
		&& ((led_out_lane2_expected_prev[0] !== last_led_out_lane2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_out_lane2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_out_lane2_expected_prev);
		$display ("     Real value = %b", led_out_lane2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_out_lane2_exp[0] = led_out_lane2_expected_prev[0];
	end
	if (
		( led_out_lane2_expected_prev[1] !== 1'bx ) && ( led_out_lane2_prev[1] !== led_out_lane2_expected_prev[1] )
		&& ((led_out_lane2_expected_prev[1] !== last_led_out_lane2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_out_lane2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_out_lane2_expected_prev);
		$display ("     Real value = %b", led_out_lane2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_out_lane2_exp[1] = led_out_lane2_expected_prev[1];
	end
	if (
		( led_out_lane2_expected_prev[2] !== 1'bx ) && ( led_out_lane2_prev[2] !== led_out_lane2_expected_prev[2] )
		&& ((led_out_lane2_expected_prev[2] !== last_led_out_lane2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_out_lane2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_out_lane2_expected_prev);
		$display ("     Real value = %b", led_out_lane2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_out_lane2_exp[2] = led_out_lane2_expected_prev[2];
	end
	if (
		( led_out_lane2_expected_prev[3] !== 1'bx ) && ( led_out_lane2_prev[3] !== led_out_lane2_expected_prev[3] )
		&& ((led_out_lane2_expected_prev[3] !== last_led_out_lane2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_out_lane2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_out_lane2_expected_prev);
		$display ("     Real value = %b", led_out_lane2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_out_lane2_exp[3] = led_out_lane2_expected_prev[3];
	end
	if (
		( led_out_lane2_expected_prev[4] !== 1'bx ) && ( led_out_lane2_prev[4] !== led_out_lane2_expected_prev[4] )
		&& ((led_out_lane2_expected_prev[4] !== last_led_out_lane2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_out_lane2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_out_lane2_expected_prev);
		$display ("     Real value = %b", led_out_lane2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_out_lane2_exp[4] = led_out_lane2_expected_prev[4];
	end
	if (
		( led_out_lane2_expected_prev[5] !== 1'bx ) && ( led_out_lane2_prev[5] !== led_out_lane2_expected_prev[5] )
		&& ((led_out_lane2_expected_prev[5] !== last_led_out_lane2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_out_lane2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_out_lane2_expected_prev);
		$display ("     Real value = %b", led_out_lane2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_out_lane2_exp[5] = led_out_lane2_expected_prev[5];
	end
	if (
		( led_out_lane2_expected_prev[6] !== 1'bx ) && ( led_out_lane2_prev[6] !== led_out_lane2_expected_prev[6] )
		&& ((led_out_lane2_expected_prev[6] !== last_led_out_lane2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_out_lane2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_out_lane2_expected_prev);
		$display ("     Real value = %b", led_out_lane2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_out_lane2_exp[6] = led_out_lane2_expected_prev[6];
	end
	if (
		( light_active_night1_expected_prev !== 1'bx ) && ( light_active_night1_prev !== light_active_night1_expected_prev )
		&& ((light_active_night1_expected_prev !== last_light_active_night1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port light_active_night1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", light_active_night1_expected_prev);
		$display ("     Real value = %b", light_active_night1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_light_active_night1_exp = light_active_night1_expected_prev;
	end
	if (
		( light_active_rush_hour_1_expected_prev !== 1'bx ) && ( light_active_rush_hour_1_prev !== light_active_rush_hour_1_expected_prev )
		&& ((light_active_rush_hour_1_expected_prev !== last_light_active_rush_hour_1_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port light_active_rush_hour_1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", light_active_rush_hour_1_expected_prev);
		$display ("     Real value = %b", light_active_rush_hour_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_light_active_rush_hour_1_exp = light_active_rush_hour_1_expected_prev;
	end
	if (
		( light_lane1_expected_prev[0] !== 1'bx ) && ( light_lane1_prev[0] !== light_lane1_expected_prev[0] )
		&& ((light_lane1_expected_prev[0] !== last_light_lane1_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port light_lane1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", light_lane1_expected_prev);
		$display ("     Real value = %b", light_lane1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_light_lane1_exp[0] = light_lane1_expected_prev[0];
	end
	if (
		( light_lane1_expected_prev[1] !== 1'bx ) && ( light_lane1_prev[1] !== light_lane1_expected_prev[1] )
		&& ((light_lane1_expected_prev[1] !== last_light_lane1_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port light_lane1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", light_lane1_expected_prev);
		$display ("     Real value = %b", light_lane1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_light_lane1_exp[1] = light_lane1_expected_prev[1];
	end
	if (
		( light_lane1_expected_prev[2] !== 1'bx ) && ( light_lane1_prev[2] !== light_lane1_expected_prev[2] )
		&& ((light_lane1_expected_prev[2] !== last_light_lane1_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port light_lane1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", light_lane1_expected_prev);
		$display ("     Real value = %b", light_lane1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_light_lane1_exp[2] = light_lane1_expected_prev[2];
	end
	if (
		( light_lane2_expected_prev[0] !== 1'bx ) && ( light_lane2_prev[0] !== light_lane2_expected_prev[0] )
		&& ((light_lane2_expected_prev[0] !== last_light_lane2_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port light_lane2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", light_lane2_expected_prev);
		$display ("     Real value = %b", light_lane2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_light_lane2_exp[0] = light_lane2_expected_prev[0];
	end
	if (
		( light_lane2_expected_prev[1] !== 1'bx ) && ( light_lane2_prev[1] !== light_lane2_expected_prev[1] )
		&& ((light_lane2_expected_prev[1] !== last_light_lane2_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port light_lane2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", light_lane2_expected_prev);
		$display ("     Real value = %b", light_lane2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_light_lane2_exp[1] = light_lane2_expected_prev[1];
	end
	if (
		( light_lane2_expected_prev[2] !== 1'bx ) && ( light_lane2_prev[2] !== light_lane2_expected_prev[2] )
		&& ((light_lane2_expected_prev[2] !== last_light_lane2_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port light_lane2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", light_lane2_expected_prev);
		$display ("     Real value = %b", light_lane2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_light_lane2_exp[2] = light_lane2_expected_prev[2];
	end
	if (
		( sel1_expected_prev[0] !== 1'bx ) && ( sel1_prev[0] !== sel1_expected_prev[0] )
		&& ((sel1_expected_prev[0] !== last_sel1_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel1_expected_prev);
		$display ("     Real value = %b", sel1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sel1_exp[0] = sel1_expected_prev[0];
	end
	if (
		( sel1_expected_prev[1] !== 1'bx ) && ( sel1_prev[1] !== sel1_expected_prev[1] )
		&& ((sel1_expected_prev[1] !== last_sel1_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel1_expected_prev);
		$display ("     Real value = %b", sel1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sel1_exp[1] = sel1_expected_prev[1];
	end
	if (
		( sel2_expected_prev[0] !== 1'bx ) && ( sel2_prev[0] !== sel2_expected_prev[0] )
		&& ((sel2_expected_prev[0] !== last_sel2_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel2_expected_prev);
		$display ("     Real value = %b", sel2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_sel2_exp[0] = sel2_expected_prev[0];
	end
	if (
		( sel2_expected_prev[1] !== 1'bx ) && ( sel2_prev[1] !== sel2_expected_prev[1] )
		&& ((sel2_expected_prev[1] !== last_sel2_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sel2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sel2_expected_prev);
		$display ("     Real value = %b", sel2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_sel2_exp[1] = sel2_expected_prev[1];
	end
	if (
		( time2_expected_prev[0] !== 1'bx ) && ( time2_prev[0] !== time2_expected_prev[0] )
		&& ((time2_expected_prev[0] !== last_time2_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port time2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", time2_expected_prev);
		$display ("     Real value = %b", time2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_time2_exp[0] = time2_expected_prev[0];
	end
	if (
		( time2_expected_prev[1] !== 1'bx ) && ( time2_prev[1] !== time2_expected_prev[1] )
		&& ((time2_expected_prev[1] !== last_time2_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port time2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", time2_expected_prev);
		$display ("     Real value = %b", time2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_time2_exp[1] = time2_expected_prev[1];
	end
	if (
		( time2_expected_prev[2] !== 1'bx ) && ( time2_prev[2] !== time2_expected_prev[2] )
		&& ((time2_expected_prev[2] !== last_time2_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port time2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", time2_expected_prev);
		$display ("     Real value = %b", time2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_time2_exp[2] = time2_expected_prev[2];
	end
	if (
		( time2_expected_prev[3] !== 1'bx ) && ( time2_prev[3] !== time2_expected_prev[3] )
		&& ((time2_expected_prev[3] !== last_time2_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port time2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", time2_expected_prev);
		$display ("     Real value = %b", time2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_time2_exp[3] = time2_expected_prev[3];
	end
	if (
		( time2_expected_prev[4] !== 1'bx ) && ( time2_prev[4] !== time2_expected_prev[4] )
		&& ((time2_expected_prev[4] !== last_time2_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port time2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", time2_expected_prev);
		$display ("     Real value = %b", time2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_time2_exp[4] = time2_expected_prev[4];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module traffic_light_control_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire [6:0] led_out_lane1;
wire [6:0] led_out_lane2;
wire light_active_night1;
wire light_active_rush_hour_1;
wire [2:0] light_lane1;
wire [2:0] light_lane2;
wire [1:0] sel1;
wire [1:0] sel2;
wire [4:0] time2;

wire sampler;                             

// assign statements (if any)                          
traffic_light_control i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.led_out_lane1(led_out_lane1),
	.led_out_lane2(led_out_lane2),
	.light_active_night1(light_active_night1),
	.light_active_rush_hour_1(light_active_rush_hour_1),
	.light_lane1(light_lane1),
	.light_lane2(light_lane2),
	.sel1(sel1),
	.sel2(sel2),
	.time2(time2)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5 1'b1;
	#5;
end 

traffic_light_control_vlg_sample_tst tb_sample (
	.clk(clk),
	.sampler_tx(sampler)
);

traffic_light_control_vlg_check_tst tb_out(
	.led_out_lane1(led_out_lane1),
	.led_out_lane2(led_out_lane2),
	.light_active_night1(light_active_night1),
	.light_active_rush_hour_1(light_active_rush_hour_1),
	.light_lane1(light_lane1),
	.light_lane2(light_lane2),
	.sel1(sel1),
	.sel2(sel2),
	.time2(time2),
	.sampler_rx(sampler)
);
endmodule

